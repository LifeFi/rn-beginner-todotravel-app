{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","AsyncStorage","setItem","JSON","stringify","s","getItem","parse","addToDo","newToDos","Date","now","console","log","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","btnText","color","TextInput","onSubmitEditing","onChangeText","payload","value","returnKeyType","placeholder","input","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","fontSize","fontWeight","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.366206f2.chunk.js","sourcesContent":["export const theme = {\r\n  bg: \"black\",\r\n  grey: \"#3A3D40\",\r\n  toDoBg: \"#1A1C20\",\r\n};\r\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Alert,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Platform,\n} from \"react-native\";\nimport { theme } from \"./colors\";\nimport { Fontisto } from \"@expo/vector-icons\";\n\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  useEffect(() => {\n    loadToDos();\n  }, []);\n\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n  const onChangeText = (payload) => setText(payload);\n\n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n\n    s ? setToDos(JSON.parse(s)) : null;\n  };\n\n  const deleteToDo = (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm Sure\",\n          style: \"destructive\",\n          onPress: () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n\n    // 해시맵, Date.now() 를 [] 으로 감싼 것은, KEY 값이기 때문이다.\n    // 해시맵이 배열(array)보다 훨씬 빠르다고 한다. ( 선형 탐색이 아니기 때문에 )\n    // const newToDos = Object.assign({}, toDos, {\n    //   [Date.now()]: { text, working },\n    // });\n\n    const newToDos = { ...toDos, [Date.now()]: { text, working } }; // ES6 문법\n\n    console.log(newToDos);\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{ ...styles.btnText, color: working ? \"white\" : theme.grey }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              ...styles.btnText,\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        onChangeText={onChangeText}\n        value={text}\n        returnKeyType=\"done\"\n        placeholder={\n          working\n            ? \"What do you have to do? (top1)\"\n            : \"Where do you want to go (top1)?\"\n        }\n        style={styles.input}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={key}>\n              <Text style={styles.toDoText}>{toDos[key].text}</Text>\n              <TouchableOpacity onPress={() => deleteToDo(key)}>\n                <Fontisto name=\"trash\" size={18} color={theme.grey} />\n              </TouchableOpacity>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  btnText: {\n    fontSize: 38,\n    fontWeight: \"600\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n});\n"],"sourceRoot":""}